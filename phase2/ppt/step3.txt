#3

추가된 점 : 
executorService ( 여러개의 작업을 효율적으로 처리하기 위해 제공되는 라이브러리)
==> 스레드를 생성해 작업을 처리하고 처리가 완료되면 스레드를 제거 하는 작업들을 해줌
- 스레드 풀(ThreadPool) 구현이 용이

ExecutorService 종류 3가지
-  CachedThreadPool : 필요에 따라 새 스레드를 생성 또는 이전에 생성된 스레드를 사용할 수 있을 경우 재사용하는 스레드풀.
                              짧은 비동기 작업을 실행 할 경우 성능 향상. 사용 가능한 스레드가 없을 경우 새 스레드가 생성되어 풀에 추가됨
                              60초 동안 사용되지 않은 스레드는 종료, 캐시에서 제거
-  FixedThreadPool : 고정된 수의 스레드를 재사용. 모든 스레드가 활성 상태일 경우 작업을 기다리는 스레드는 대기 상태.
                           작업이 완전히 종료될 때 까지 풀에 스레드는 존재한다.
- SingleThreadExecutor : 바인딩 되지 않은 queue에서 단일 스레드로 작업 처리. 순차적인 테스트 보장

작업 처리 요청:
ExecutorService의 작업 큐에 Runnable 또는 Callable 객체를 넣는 행위
-execute() Runnable을 작업 큐에 저장
-submit() Runnable 또는 Callable을 작업 큐에 저장, Future 객체를 리턴
-submit 메소드를 사용하면 스레드의 생성 오버 헤드를 줄일수 있다. execute메소드는 작업 처리중
예외가 발생하면 사용중이던 스레드를 버리고 새로운 스레드를 생성한다. 그러나 submit 메소드는
쓰던 스레드를 재활용한다.        
==> https://sas-study.tistory.com/231

**오버헤드 : 어떤 처리를 하기 위해 들어가는 간접적인 처리 시간, 메모리
처리시간 : 
1차시
4.947000
6.314200
8.204000
11.345500
14.366792

2차시
5.113500
6.809400
10.626667
14.616588
18.218304