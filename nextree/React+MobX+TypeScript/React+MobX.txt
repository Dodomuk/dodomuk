======cmd

node -v
npm -v
npm install -g yarn
//글로벌로 하는 이유는 어느 디렉토리에서나 사용할 수 있어야되긴 떄문에
yarn -v

yarn create react-app hello-react

cd 디렉토리

yarn start

@material-ui/core를 찾을 수 없을 때
(yarn일 경우)
yarn add @material-ui/core

* react-scripts 은(는) 내부 또는 외부 명령 실행할 수 있는 프로그램 또는 배치 파일이 아닙니다
 가 뜰 경우
==> yarn add global react-scripts 또는 yarn add react-scripts / yarn upgrade

======npm
자바스크립트 프로그래밍 언어를 위한 패키지 관리자. Node.js 의 기본 패키지 관리자이다.
======yarn
npm과 같은 js패키지 매니저 npm보다 속도나 안전성 면에서 조금 더 우수하다고 한다.

======StrictMode
라이프사이클을 잘못 사용하던지 어떤 오류가 발생될 가능성이 있을 때 이에 대해
경고 메시지를 띄워주는 역할



//autoBind 라이브러리 참고

cinoibebtDidMount : 서버에 가서 데이터를 갖고 와서 화면에 랜더링 되서 보여주는 작업을 해줌

------------------------------------------------------

@inject : @observer 컴포넌트의 store를 리엑트 컴포넌트로 주입한다. 
store를 주입하므로서 props에서 꺼내 사용할 수 있다.

@observer : 리엑트 컴퍼넌트 모두에 적용하는 API. 랜더 메소드 수행
==> autorun(render)

autorun : observable 관련 데이터가 변경되었을 때 수행되는 작업을 지정할 때
사용. 

@observable : 특정 데이터를 관찰 가능한 데이터로
만들어서 리액트 컴퍼넌트가 스테이트 처럼 사용할 수
있도록 만들어주는 API. state로 사용할 값들에는 전부 observable을
적용해야 한다.

makeObservable

@action
observable 특정 메소드가 데이터를 수정하는 작업을 진행한다면 
이 API를 붙여줘야 한다. modify의 기능을 함.
action 어노테이션을 붙이지 않으면 state 데이터들이 변경이 일어날때마다
랜더링이 일어남. But action api를 사용하면 데이터들이 여러개 변경되어
도 렌더링은 한번만 일어나게 된다. == > 트랜잭션 

@computed
캐싱 작업 진행. 연산 작업을 할 경우 해당 연산에 사용되는 데이터들의
값이 변경되지 않았다면 해당 연산의 결과값을 저장해준다. 즉 observable
데이터들의 연산이 일어날때 필수적으로 넣어주는것이 좋다. 
==> get메소드에 적용해서 사용을 한다.

@autobind 




==========라이브러리들==========

moment :
https://flamingotiger.github.io/javascript/momentjs/


~~~
observable
action
computed
autobind
event.target.value