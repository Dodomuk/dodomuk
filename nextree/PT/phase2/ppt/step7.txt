#7

step6의 쓰레드 풀 관련 작업하는 쓰레드의 갯수를 10개로 지정해
FixedThreadPool 처럼 운용했다면
step7의 쓰레드 풀은 자체적으로 필요에 따라 쓰레드의 수를 늘리거나 줄이는 CachedThreadPool의 
역할을 한다.


queue를 두개 만들어 사용한 이유 :
take()를 통해 꺼내게 될 경우 일부 queue만 일이 몰리게 될 수 있으므로
index에 따라 get()을 통해 분배해 공정성도 어느정도 보장 받고 ArrayBlockingQueue
의 작업량도 적절하게 분배해줄수 있다. 

현재 step7은 두개의 레이어를 가지고 있다. 



run 처리 시간 계산

1차시
1.5.192000
2.6.807714
3.10.711182
4.14.089267
5.

외부 큐 Linked (사이즈 500)/ 내부 큐 Array (사이즈 50)/ queue 담는 과정 add()
1차시
1. 5.338800
2. 6.937429
3. 10.623400
4. 15.831500
5. 22.793773

2차시
1. 5.248000
2. 7.169333
3. 10.573600
4. 10.757000
5. 18.365071

3차시
1.5.543000
2.7.046857
3.11.679500
4.13.397842
5.18.207167

외부 큐 Linked (사이즈 500)/ 내부 큐 Array (사이즈 50)/ queue 담는 과정 put()

외부 큐 Linked (사이즈 500)/ 내부 큐 Array (사이즈 50)/ queue 담는 과정 offer()

외부 큐 Linked (사이즈 500)/ 내부 큐 Array (사이즈 50)/ queue 담는 과정 **add()
1차시
1.6.701750
2.7.068667
3.10.641500
4.14.728714
5.17.477467

2차시
1.5.743667
2.6.672000
3.10.475800
4.13.183545
5.16.796087

3차시
1.5.466800
2.7.066000
3.11.197000
4.12.723500
5.18.059667

외부 큐 Linked (사이즈 50)/ 내부 큐 Array (사이즈 10)/ queue 담는 과정 **add()
1차시 
1.5.530000
2.7.062143
3.11.077200
4. 에러 발생(Queue Full)

2차시
1.5.338667
2.6.823333
3.10.772143
4.에러 발생(Queue Full)

외부 큐 Linked (사이즈 50)/ 내부 큐 Array (사이즈 10)/ queue 담는 과정 **put()
1차시
1.5.676000
2.7.158333
3.9.905500
4.13.196500
5.19.080800

2차시
1.5.510000
2.7.078000
3.10.024000
4.13.409125
5.18.980000

3차시
1.5.657000
2.7.041000
3.10.864250
4.13.017000
5.18.828000

외부 큐 Linked (사이즈 50)/ 내부 큐 Array (사이즈 10)/ queue 담는 과정 **offer()
*offer의 timeOut 0.0001초로  설정
1.6.244333
2.7.360000
3.10.988000
4.12.407500
5.E0F

1.6.397200
2.8.327000
3.10.924500
4.13.062500
5.E0F

외부 큐 Linked (사이즈 50)/ 내부 큐 Linked (사이즈 10)/ queue 담는 과정 **offer()
*offer의 timeOut 0.0001초로  설정

1.5.513000
2.6.890000
3.10.930500
4.13.720000
5.E0F

1.5.742000
2.7.359000
3.12.457643
4.14.251125
5.16.362231 <<- E0F 발생

외부 큐 Linked (사이즈 50)/ 내부 큐 Linked (사이즈 20)/ queue 담는 과정 **offer()
*offer의 timeOut 0.0001초로  설정

1.5.514000
2.6.932571
3.10.758000
4.16.759375
5.18.717167

1.5.446000
2.7.489625
3.10.930000
4.13.748000
5.

HandlerPool에 indexOutOfBound를 무시하고자 get했을 때 null일 경우에 동기화
를 적용한 경우

1차시
1.5.229200
2.8.424000
3.11.513667
4.13.720667
5.17.400333

2차시
1.9.430000
2.16.963400
3.24.178600
4.29.351067
5.35.715625

3차시
1.7.157000
2.13.724556
3.25.274600
4.26.715550
5.39.050000

다시 없앴을때
1차시
1.5.879667
2.6.927778
3.10.846250
4.16.597000
5.21.599385
